name: Dockercoins app CI/CD
run-name: Dockercoins app CI/CD
on: [push]
env:
  CLUSTER_NAME: dockercoins-cluster-teo
  CLUSTER_ZONE: europe-west1-b
  PROJECT_NAME: teolia-school-devops
  TEST_NODE_IP: "146.148.118.137"
  HASHER_TEST_PORT: "30001"
  RNG_TEST_PORT: "30002"
  REDIS_TEST_PORT: "30003"
  WEBUI_TEST_PORT: "30004"

jobs:
  BuildAndPushImage:
    name: Build and push the docker image.
    runs-on: ubuntu-latest
    permissions: write-all
    steps:

      - name: Checkout code
        uses: actions/checkout@master

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Get current version
        id: get_current_version
        run: |
          current_version=$(cat VERSION)
          echo "currentVersion=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.get_current_version.outputs.currentVersion }}
          release_name: Release ${{ steps.get_current_version.outputs.currentVersion }}
          body: |
            App version ${{ steps.get_current_version.outputs.currentVersion }}.
          draft: false
          prerelease: false

      - name: Get current branch
        id: current_branch
        run: |
          echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

      - name: Calculate image tag
        id: calculate_tag
        run: |
          currentBranch=${{ steps.current_branch.outputs.branch }}
          if [[ $currentBranch == 'main' ]]
            then
              tag=${{ steps.get_current_version.outputs.currentVersion }}
          else
            tag=${{ steps.get_current_version.outputs.currentVersion }}-${{ github.sha }}
          fi   
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push the hasher Docker image
        uses: docker/build-push-action@v4
        with:
          file: hasher/Dockerfile
          push: true
          tags: |
            mbouzayeni/hasher:${{ steps.calculate_tag.outputs.tag }}
          cache-from: type=registry,ref=mbouzayeni/hasher:buildcache
          cache-to: type=registry,ref=mbouzayeni/hasher:buildcache,mode=max
      
      - name: Build and push the rng Docker image
        uses: docker/build-push-action@v4
        with:
          file: rng/Dockerfile
          push: true
          tags: |
            mbouzayeni/rng:${{ steps.calculate_tag.outputs.tag }}
          cache-from: type=registry,ref=mbouzayeni/rng:buildcache
          cache-to: type=registry,ref=mbouzayeni/rng:buildcache,mode=max

      - name: Build and push the redis Docker image
        uses: docker/build-push-action@v4
        with:
          file: redis_server/Dockerfile
          push: true
          tags: |
            mbouzayeni/redis:${{ steps.calculate_tag.outputs.tag }}
          cache-from: type=registry,ref=mbouzayeni/redis:buildcache
          cache-to: type=registry,ref=mbouzayeni/redis:buildcache,mode=max          
          
      - name: Build and push the worker Docker image
        uses: docker/build-push-action@v4
        with:
          file: worker/Dockerfile
          push: true
          tags: |
            mbouzayeni/worker:${{ steps.calculate_tag.outputs.tag }}
          cache-from: type=registry,ref=mbouzayeni/worker:buildcache
          cache-to: type=registry,ref=mbouzayeni/worker:buildcache,mode=max
      
      - name: Build and push the webui Docker image
        uses: docker/build-push-action@v4
        with:
          file: front/Dockerfile
          push: true
          tags: |
            mbouzayeni/webui:${{ steps.calculate_tag.outputs.tag }}
          cache-from: type=registry,ref=mbouzayeni/webui:buildcache
          cache-to: type=registry,ref=mbouzayeni/webui:buildcache,mode=max         
    outputs:
      imageTag: ${{ steps.calculate_tag.outputs.tag }}
      currentBranch: ${{ steps.current_branch.outputs.branch }}

  DeployTestingServices:
    name: Deploy testing instances of the services.
    runs-on: ubuntu-latest
    needs: BuildAndPushImage
    steps:
    - name: Checkout code
      uses: actions/checkout@master

    - name: Install gcloud authentication plugin
      run: |
        REPO_URL="https://packages.cloud.google.com/apt"
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] $REPO_URL cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list >/dev/null
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -

        sudo apt-get update -y
        sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

    - name: Authenticate to GKE cluster
      env:
        GCLOUD_KEY: ${{ secrets.GCLOUD_KEY }}
      run: |   
        echo "$GCLOUD_KEY" > ${HOME}/gcloud.json
        gcloud auth activate-service-account --key-file=${HOME}/gcloud.json
        gcloud container clusters get-credentials \
        ${{ env.CLUSTER_NAME }} --zone ${{ env.CLUSTER_ZONE }} --project ${{ env.PROJECT_NAME }}

    - name: Update the image tag
      uses: cschleiden/replace-tokens@v1
      with:
        files: '["manifests/test/*"]'
        tokenPrefix: __
        tokenSuffix: __
      env:
        TAG: ${{ needs.BuildAndPushImage.outputs.imageTag }}

    - name: Deploy to the gke cluster
      run: |
        kubectl apply -f manifests/test

    - name: Replace the URI in the test file
      uses: cschleiden/replace-tokens@v1
      with:
        files: '["hasher/tests/smoke_test.rb", "redis_server/tests/smoke_test.py", "rng/tests/smoke_test.py"]'
        tokenPrefix: __
        tokenSuffix: __
      env:
        IP: ${{ env.TEST_NODE_IP }}
        HASHER_TEST_PORT: ${{ env.HASHER_TEST_PORT }}
        RNG_TEST_PORT: ${{ env.RNG_TEST_PORT }}
        REDIS_TEST_PORT: ${{ env.REDIS_TEST_PORT }}
        WEBUI_TEST_PORT: ${{ env.WEBUI_TEST_PORT }}

  RunHasherTests:
    needs: DeployTestingServices
    name: Run smoke tests on the Hasher component
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Replace the URI in the test file
        uses: cschleiden/replace-tokens@v1
        with:
          files: '["hasher/tests/smoke_test.rb"]'
          tokenPrefix: __
          tokenSuffix: __
        env:
          IP: ${{ env.TEST_NODE_IP }}
          HASHER_TEST_PORT: ${{ env.HASHER_TEST_PORT }} 
      
      - name: Run the hasher component smoke tests
        run: |
          ruby hasher/tests/smoke_test.rb

  RunRngTests:
    needs: DeployTestingServices
    name: Run smoke tests on the Rng component
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
    
      - name: Replace the URI in the test file
        uses: cschleiden/replace-tokens@v1
        with:
          files: '["rng/tests/smoke_test.py"]'
          tokenPrefix: __
          tokenSuffix: __
        env:
          IP: ${{ env.TEST_NODE_IP }}
          RNG_TEST_PORT: ${{ env.RNG_TEST_PORT }}
      
      - name: Run the rng component smoke tests
        run: |
          echo "Installing some prerequisite to run tests"
          pip install pytest

          echo "Running Smoke Tests for the Rng component"
          cd rng && pytest

  RunRedisServerTests:
    needs: DeployTestingServices
    name: Run smoke tests on Redis Server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      
      - name: Replace the URI in the test file
        uses: cschleiden/replace-tokens@v1
        with:
          files: '["redis_server/tests/smoke_test.py"]'
          tokenPrefix: __
          tokenSuffix: __
        env:
          IP: ${{ env.TEST_NODE_IP }}
          REDIS_TEST_PORT: ${{ env.REDIS_TEST_PORT }}
        
      - name: Run redis server component smoke tests
        run: |
          echo "Installing some prerequisite to run tests"
          pip install pytest redis
          
          echo "Running Smoke Tests for Redis Server component"
          cd redis_server/ && pytest

  RunWebUIIntegrationTests:
    needs: [RunHasherTests, RunRngTests, RunRedisServerTests]
    name: Run webui component integration tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Run webui component integration tests
        run: |
          echo "Running Smoke Tests on the Webui component"
          response=$(curl -s -o /dev/null -w "%{http_code}"  http://${{ env.TEST_NODE_IP }}:${{ env.WEBUI_TEST_PORT }}/)
          if [[ $response != 200 && $response != 302 ]]
            then
              echo "Smoke test against the test deployment failed againt / endpoint with code ${response}"
              exit 1
            else
              echo "The smoke test againt / passed"  
          fi
          response=$(curl -s -o /dev/null -w "%{http_code}"  http://${{ env.TEST_NODE_IP }}:${{ env.WEBUI_TEST_PORT }}/json)
          if [[ $response != 200 ]]
            then
              echo "Smoke test against the test deployment failed againt /json endpoint with code ${response}"
              exit 1
            else
              echo "The smoke test against /json passed"  
          fi  
  CleanUpTestDeployment:
    needs: RunWebUIIntegrationTests
    name: Delete the testing deployments and services
    runs-on: ubuntu-latest
    steps:       
    - name: Delete test pods and services
      run: |
        # Delete pods
        echo "deleting pods"
        kubectl delete deployment hasher-deployment-test
        kubectl delete deployment redis-deployment-test
        kubectl delete deployment rng-deployment-test
        kubectl delete deployment worker-deployment-test
        kubectl delete deployment webui-deployment-test
        # Delete services
        kubectl delete svc hasher-test-service
        kubectl delete svc redis-test-service
        kubectl delete svc rng-test-service
        kubectl delete svc webui-test-service

  Deploy:
    name: Deploy production manifests to Kubernetes Cluster.
    runs-on: ubuntu-latest
    needs: RunWebUIIntegrationTests
    steps:
    - name: Checkout code
      uses: actions/checkout@master

    - name: Install gcloud authentication plugin
      run: |
        REPO_URL="https://packages.cloud.google.com/apt"
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] $REPO_URL cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list >/dev/null
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -

        sudo apt-get update -y
        sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

    - name: Authenticate to GKE cluster
      env:
        GCLOUD_KEY: ${{ secrets.GCLOUD_KEY }}
      run: |   
        echo "$GCLOUD_KEY" > ${HOME}/gcloud.json
        gcloud auth activate-service-account --key-file=${HOME}/gcloud.json
        gcloud container clusters get-credentials \
        ${{ env.CLUSTER_NAME }} --zone ${{ env.CLUSTER_ZONE }} --project ${{ env.PROJECT_NAME }}
    - name: Update tag in the Kubernetes manifest files
      uses: cschleiden/replace-tokens@v1
      with: 
        files: '["manifests/prod/*"]'
        tokenPrefix: __
        tokenSuffix: __
      env:
        TAG: ${{ needs.BuildAndPushImage.outputs.imageTag }}
            
    - name: Deploy to Kubernetes GKE cluster
      run: |
        kubectl apply -f manifests/prod